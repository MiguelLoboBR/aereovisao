√ìtimo, Miguel ‚Äî com **Firebase para autentica√ß√£o** e **PostgreSQL como banco de dados**, aqui vai a **instru√ß√£o completa, pronta para IA do Replit ou Dreamflow**, considerando exatamente esse cen√°rio:

---

## üõ†Ô∏è **Ajuste t√©cnico para conte√∫do HTML com Firebase + PostgreSQL**

---

### ‚úÖ 1. **Schema de valida√ß√£o Zod (`postFormSchema.ts`)**

> O campo `conteudo` agora recebe HTML formatado do editor (`ReactQuill`).  
A valida√ß√£o precisa aceitar isso como uma string comum.

```ts
import { z } from "zod";

export const postFormSchema = z.object({
  titulo: z.string().min(3, "T√≠tulo obrigat√≥rio"),
  categoria: z.string().nonempty("Categoria obrigat√≥ria"),
  youtubeUrl: z.string().url("URL inv√°lida").optional(),
  conteudo: z
    .string()
    .min(5, "Conte√∫do deve ter pelo menos 5 caracteres")
    .max(50000, "Conte√∫do muito longo"),
});
```

> üìå N√£o sanitizar ou rejeitar tags HTML. A valida√ß√£o trata apenas tamanho.

---

### ‚úÖ 2. **Model PostgreSQL (Exemplo com Prisma)**

> No banco PostgreSQL, o campo `conteudo` deve aceitar HTML longo.  
Use o tipo `TEXT` no schema.

#### Exemplo em Prisma:
```prisma
model Post {
  id          Int      @id @default(autoincrement())
  titulo      String
  categoria   String
  youtubeUrl  String?  @db.Text
  conteudo    String   @db.Text
  imagem      String?
  anexo       String?
  anexoNome   String?
  createdAt   DateTime @default(now())
  authorId    Int
}
```

> ‚úÖ `@db.Text` garante espa√ßo para HTML formatado sem truncar.

---

### ‚úÖ 3. **No backend (`server/posts.ts`)**

> Garanta que o conte√∫do do corpo est√° sendo lido como string normal:

```ts
const { titulo, conteudo, youtubeUrl, categoria } = req.body;
```

‚úÖ **N√£o tente fazer `JSON.parse(req.body.conteudo)`** ‚Äî isso quebraria o HTML.

---

### ‚úÖ 4. **Visualiza√ß√£o segura do HTML (no frontend)**

> Para exibir o conte√∫do salvo (HTML), use:

```tsx
<div
  className="prose max-w-full"
  dangerouslySetInnerHTML={{ __html: post.conteudo }}
/>
```

> ‚úÖ Essa pr√°tica √© padr√£o para conte√∫dos vindos de editores WYSIWYG.

---

## üîê Seguran√ßa com Firebase

> Apenas usu√°rios autenticados com n√≠vel `admin` ou `colaborador` devem poder enviar HTML no post.  
A verifica√ß√£o j√° deve existir no backend:

```ts
app.post("/api/posts", authMiddleware, colaboradorMiddleware, upload.fields([...]), handler);
```

---

## ‚úÖ Conclus√£o para IA

**Atualize a valida√ß√£o Zod e o campo no PostgreSQL para aceitar HTML como texto.  
N√£o transforme o conte√∫do no backend, apenas armazene como est√°.  
Renderize o HTML no frontend com seguran√ßa e formata√ß√£o.**

---

Se desejar, posso montar um arquivo completo `postFormSchema.ts` ou o trecho Prisma adaptado com essas defini√ß√µes. Deseja?