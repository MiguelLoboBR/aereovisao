
üì¶ INSTRU√á√ïES COMPLETAS PARA A IA DO REPLIT ‚Äì GERA√á√ÉO DE POST AUTOM√ÅTICO (ChatGPT IA)

OBJETIVO:
Implementar a funcionalidade do bot√£o "Criar agora" na tela de configura√ß√£o da IA. Isso permitir√° que um post seja gerado automaticamente com base nas instru√ß√µes configuradas, usando a API da OpenAI e publicando em nome do usu√°rio colaborador "ia@aereovisao.com.br".

---

‚úÖ ETAPA 1 ‚Äì BACKEND

1. Criar o arquivo: server/routes/admin/ia-generate.ts
2. Inserir o seguinte c√≥digo:

(importar c√≥digo do arquivo "Api Ia Generate" fornecido por ChatGPT)
Codigo: 

import express from "express";
import { authenticateToken, requireAdmin } from "../../middleware/auth";
import { prisma } from "../../lib/prisma";
import fetch from "node-fetch";

const router = express.Router();

router.post("/api/admin/ia-generate", authenticateToken, requireAdmin, async (req, res) => {
  const { openaiKey, model, temperature, topics, instructions } = req.body;

  if (!openaiKey || !model || !topics || !instructions) {
    return res.status(400).json({ error: "Par√¢metros ausentes" });
  }

  try {
    const prompt = `${instructions}\n\nT√≥picos: ${topics}\n\nFormato: HTML formatado para publica√ß√£o.`;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${openaiKey}`
      },
      body: JSON.stringify({
        model,
        temperature: parseFloat(temperature || "0.7"),
        messages: [{ role: "user", content: prompt }]
      })
    });

    const data = await response.json();
    const content = data.choices?.[0]?.message?.content;
    if (!content) throw new Error("Resposta inv√°lida da OpenAI");

    const iaUser = await prisma.user.findFirst({ where: { email: "ia@aereovisao.com.br" } });
    if (!iaUser) return res.status(404).json({ error: "Usu√°rio IA n√£o encontrado" });

    const newPost = await prisma.post.create({
      data: {
        titulo: `Post autom√°tico - ${new Date().toLocaleDateString()}`,
        conteudo: content,
        categoria: "noticia",
        authorId: iaUser.id,
        publicado: true
      }
    });

    return res.status(200).json({ success: true, postId: newPost.id });
  } catch (err) {
    console.error("Erro IA:", err);
    return res.status(500).json({ error: "Erro ao gerar conte√∫do." });
  }
});

export default router;





3. Certificar-se de que a rota esteja registrada no Express em server/index.ts:
import iaGenerateRoute from './routes/admin/ia-generate'
app.use(iaGenerateRoute)

4. Garantir que o middleware de autentica√ß√£o esteja funcionando corretamente:
- authenticateToken (valida JWT)
- requireAdmin (valida role === 'admin')

5. Validar que o usu√°rio com email 'ia@aereovisao.com.br' existe no banco (PostgreSQL).

---

‚úÖ ETAPA 2 ‚Äì FRONTEND (IAConfig.tsx ou IAConfigClean.tsx)

1. Adicionar a fun√ß√£o de chamada da gera√ß√£o:

```tsx
const handleCriarAgora = async () => {
  try {
    const res = await apiRequest("POST", "/api/admin/ia-generate", {
      openaiKey: form.openaiKey,
      model: form.model,
      temperature: form.temperature,
      topics: form.topics,
      instructions: form.instructions,
    });
    toast.success("Post criado com sucesso!");
  } catch (err) {
    toast.error("Erro ao gerar post autom√°tico.");
  }
};
```

2. Conectar a fun√ß√£o ao bot√£o ‚ÄúCriar agora‚Äù:

```tsx
<Button onClick={handleCriarAgora}>
  <Play className="mr-2 h-4 w-4" /> Criar agora
</Button>
```

---

‚úÖ ETAPA 3 ‚Äì VALIDA√á√ÉO

- A IA deve ser capaz de gerar um conte√∫do HTML formatado com base no prompt.
- O post deve ser criado automaticamente com:
  - T√≠tulo: "Post autom√°tico - [data]"
  - Categoria: noticia
  - Publicado: true
  - Autor: ia@aereovisao.com.br
- Exibir um toast de sucesso/erro.

---

‚úÖ EXTRAS OPCIONAIS

- Adicionar bot√£o ‚ÄúExecutar agora‚Äù no painel de IA
- Adicionar flag `publicado: true` direto na cria√ß√£o
- (Futuro) permitir sele√ß√£o de categoria ao gerar o post

---

üß† Qualquer d√∫vida, a refer√™ncia completa do projeto est√° no ZIP fornecido: Portal-do-Piloto_ia.zip
